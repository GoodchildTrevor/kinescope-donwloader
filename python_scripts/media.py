import asyncio
from logging import Logger
import subprocess
from urllib.parse import urlparse

from playwright.async_api import (
    Route,
    Request,
)


class MediaInterceptor:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞-–ø–æ—Ç–æ–∫–æ–≤ M3U8.
    :param logger: –û–±—ä–µ–∫—Ç –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    :type logger: Logger
    """
    def __init__(self, logger: Logger):
        self.logger: Logger = logger
        self.captured_media_info: list[dict[str, str]] = []
        self.seen_m3u8_urls: set[str] = set()

    async def intercept_m3u8(
            self,
            route: Route,
            request: Request) -> None:
        """
        –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç M3U8 –ø–æ—Ç–æ–∫–∏, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç URL-–∞–¥—Ä–µ—Å –∑–∞–ø—Ä–æ—Å–∞. –ï—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç '.m3u8' –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Ç–æ–∫–æ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ 'quality' –∏–ª–∏ 'type',
        –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω—ë–º –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.
        :param route: –û–±—ä–µ–∫—Ç –º–∞—Ä—à—Ä—É—Ç–∞ Playwright, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
        :param request: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ Playwright.
        """
        request_url: str = request.url
        parsed_url = urlparse(request_url)

        if ".m3u8" in request_url:
            query_params: str = parsed_url.query
            if "quality=" in query_params and ("type=video" in query_params or "type=audio" in query_params):
                await route.continue_()
                return

            if request_url not in self.seen_m3u8_urls:
                self.logger.info(f"üé• –ó–∞—Ö–≤–∞—á–µ–Ω m3u8 –ø–æ—Ç–æ–∫: {request_url}")
                self.captured_media_info.append({"url": request_url, "title": "Untitled_Video"})
                self.seen_m3u8_urls.add(request_url)

        await route.continue_()

    async def download_media_list(self) -> None:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ `captured_media_info`.
        –û–∂–∏–¥–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –¥–æ 30 —Å–µ–∫—É–Ω–¥. –î–ª—è –∫–∞–∂–¥–æ–≥–æ M3U8 URL-–∞–¥—Ä–µ—Å–∞
        –∏—Å–ø–æ–ª—å–∑—É–µ—Ç FFmpeg –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP4.
        """
        cooldown: int = 0
        while not self.captured_media_info:
            await asyncio.sleep(1)
            cooldown += 1
            if cooldown >= 30:
                self.logger.error("‚ùå –ú–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã—Ö–æ–¥.")
                return

        for media_item in self.captured_media_info:
            m3u8_url: str = media_item["url"]
            raw_title: str = media_item.get("title", "")

            sanitized_title: str = "".join(
                c for c in raw_title if c.isalnum() or c in (" ", ".", "_", "-")
            ).strip() or "downloaded_video"

            output_file_name: str = f"{sanitized_title.replace(' ', '_')}.mp4"

            if ".m3u8" not in m3u8_url:
                self.logger.warning(f"‚ö†Ô∏è URL '{m3u8_url}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è .m3u8 —Ñ–∞–π–ª–æ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            self.logger.info(f"üîó –°–∫–∞—á–∏–≤–∞–µ–º: {m3u8_url} -> {output_file_name}")
            try:
                subprocess.run(
                    ["ffmpeg", "-y", "-i", m3u8_url, "-c", "copy", output_file_name],
                    check=True,
                    capture_output=True
                )
                self.logger.info(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {output_file_name}")
            except subprocess.CalledProcessError as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ FFmpeg –¥–ª—è {output_file_name}: {e}")
                self.logger.error(f"stdout: {e.stdout.decode(errors='ignore')}")
                self.logger.error(f"stderr: {e.stderr.decode(errors='ignore')}")
            except FileNotFoundError:
                self.logger.error("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ PATH.")
