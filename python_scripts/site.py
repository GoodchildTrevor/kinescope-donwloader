import asyncio
from logging import Logger
from playwright.async_api import (
    Page,
    Frame,
    TimeoutError as PlaywrightTimeout
)


class SiteClient:
    """
    –ö–ª–∞—Å—Å-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–∞–π—Ç–æ–º.
    :param logger: –≠–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
    :param page: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã Playwright.
    """
    def __init__(self, logger: Logger, page: Page) -> None:
        self.logger = logger
        self.page = page

    async def perform_login(self, url: str, username: str, password: str) -> bool:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏–Ω.
        :param url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞.
        :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (email).
        :param password: –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :return: True, –µ—Å–ª–∏ –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –∏–Ω–∞—á–µ False.
        """
        self.logger.info("üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...")
        await self.page.goto(url, timeout=60000)

        try:
            await self.page.wait_for_selector('input[type="email"], input[name="email"]', timeout=15000)
            await self.page.fill('input[type="email"], input[name="email"]', username)
            await self.page.fill('input[type="password"]', password)

            async with self.page.expect_navigation(timeout=60000):
                await self.page.click('button[type="submit"]')

            self.logger.info("üîê –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥")
            return True
        except PlaywrightTimeout:
            self.logger.warning("‚ö†Ô∏è –ü–æ–ª—è –ª–æ–≥–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
            return False

    async def get_video_title(self, inner_frame: Frame, idx: int = 0) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –∏–∑ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö <p> –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ xblock-student_view-html.
        :param inner_frame: –§—Ä–µ–π–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        :param idx: –ò–Ω–¥–µ–∫—Å –±–ª–æ–∫–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
        :return: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –≥–æ—Ç–æ–≤–æ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
        """
        base_title = "Untitled_Video"

        try:
            container = inner_frame.locator("div.xblock-student_view-html")
            if await container.count() <= idx:
                self.logger.warning(f"‚ö†Ô∏è –ë–ª–æ–∫ xblock-student_view-html #{idx} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return base_title

            p_locator = container.nth(idx).locator("p")
            p_count = await p_locator.count()
            if p_count == 0:
                self.logger.warning(f"‚ö†Ô∏è –í –±–ª–æ–∫–µ #{idx} –Ω–µ—Ç <p>")
                return base_title

            parts: list[str] = []
            for i in range(min(2, p_count)):
                text = await p_locator.nth(i).text_content()
                if text:
                    parts.append(text.strip().replace("\n", " ").replace("\r", " "))

            base_title = " ".join(parts).strip()
            base_title = "".join(c for c in base_title if c.isalnum() or c in (' ', '.', '_', '-')).strip()
            base_title = base_title.replace(" ", "_") or "Untitled_Lesson"

            self.logger.info(f"üìù –ò–∑–≤–ª–µ—á—ë–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ –∏–∑ –±–ª–æ–∫–∞ #{idx}: {base_title}")
        except Exception as title_e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ –¥–ª—è –±–ª–æ–∫–∞ #{idx}: {title_e}")

        return base_title

    async def activate_tab(self, tab_index: int) -> None:
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –≤–∏–¥–µ–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É.
        :param tab_index: –ò–Ω–¥–µ–∫—Å –≤–∫–ª–∞–¥–∫–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 0).
        """
        tab_elements = self.page.locator(".sf-unit-tab.sequence-tab-view-navigation__tab")
        if await tab_elements.count() > tab_index:
            is_current_tab = "sf-unit-tab--current" in (await tab_elements.nth(tab_index).get_attribute("class") or "")
            if not is_current_tab:
                self.logger.info(f"‚û°Ô∏è –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É {tab_index + 1}...")
                await tab_elements.nth(tab_index).click()
                await self.page.wait_for_load_state('domcontentloaded', timeout=10000)
                await asyncio.sleep(2)
