import asyncio
from logging import Logger

from playwright.async_api import (
    async_playwright,
    Page,
    Frame,
    ElementHandle,
    BrowserContext,
    Browser
)

from python_scripts.iframes import FrameUtils
from python_scripts.media import MediaInterceptor
from python_scripts.site import SiteClient


async def main_async(
        logger: Logger,
        url: str,
        username: str,
        password: str
) -> list[dict[str, str]]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ.
    –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –≤—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç, –Ω–∞—Ö–æ–¥–∏—Ç –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä—ã Kinescope,
    –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏—Ö –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç m3u8-–ø–æ—Ç–æ–∫–∏, –∑–∞—Ç–µ–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç
    –∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏.
    :param url: URL-–∞–¥—Ä–µ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.
    :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å URL –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤.
    """
    media_interceptor = MediaInterceptor(logger)

    async with async_playwright() as p:
        browser: Browser = await p.chromium.launch(headless=False)
        context: BrowserContext = await browser.new_context()
        page: Page = await context.new_page()

        frame_utils = FrameUtils(logger, page)
        lms_client = SiteClient(logger, page)

        # –õ–æ–≥–∏–Ω
        if not await lms_client.perform_login(url, username, password):
            await browser.close()
            return []

        logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        try:
            await page.wait_for_selector("iframe#unit-iframe", timeout=30000)
            unit_iframe_element: ElementHandle | None = await page.query_selector("iframe#unit-iframe")
            if not unit_iframe_element:
                raise Exception("–û—Å–Ω–æ–≤–Ω–æ–π iframe –Ω–µ –Ω–∞–π–¥–µ–Ω")

            inner_frame: Frame | None = await unit_iframe_element.content_frame()
            if not inner_frame:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç iframe")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            await browser.close()
            return []

        # –ü–µ—Ä–µ—Ö–≤–∞—Ç m3u8
        await page.route("**/*", lambda route, request: media_interceptor.intercept_m3u8(route, request))
        # –ü–æ–∏—Å–∫ Kinescope iframe'–æ–≤
        kinescope_iframes: list[ElementHandle] = await frame_utils.get_kinescope_iframes(inner_frame)

        for idx, iframe_handle in enumerate(kinescope_iframes):
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ
            current_title = await lms_client.get_video_title(inner_frame, idx)

            logger.info(f"üéØ –í–∏–¥–µ–æ {idx + 1} –∑–∞–≥–æ–ª–æ–≤–æ–∫: {current_title}")

            kinescope_frame: Frame | None = await iframe_handle.content_frame()
            if kinescope_frame:
                await frame_utils.play_kinescope_video(kinescope_frame, iframe_handle, idx)
                await asyncio.sleep(5)

                for media in reversed(media_interceptor.captured_media_info):
                    if media["title"] == "Untitled_Video":
                        media["title"] = current_title
                        break

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö
        final_media: list[dict[str, str]] = []
        seen_urls: set[str] = set()
        seen_titles: set[str] = set()

        for item in media_interceptor.captured_media_info:
            if item["url"] in seen_urls:
                continue
            title: str = item["title"]
            new_title: str = title
            suffix: int = 1
            while new_title in seen_titles:
                new_title = f"{title}_{suffix}"
                suffix += 1
            final_media.append({"url": item["url"], "title": new_title})
            seen_urls.add(item["url"])
            seen_titles.add(new_title)

        await browser.close()
        return final_media
