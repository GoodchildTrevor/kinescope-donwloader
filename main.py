import asyncio
from dotenv import load_dotenv
import gradio as gr
import logging
import os

from python_scripts.async_logic import main_async
from python_scripts.media import MediaInterceptor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
USERNAME = os.getenv("LMS_EMAIL")
PASSWORD = os.getenv("LMS_PASSWORD")

with gr.Blocks() as demo:
    gr.Markdown("# üé¨ Kinescope Downloader")

    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 ‚Äî –ø–æ–∏—Å–∫
    with gr.Column(visible=True) as page1:
        url_input = gr.Textbox(label="üîó –í–≤–µ–¥–∏—Ç–µ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã", placeholder="https://...")
        run_btn = gr.Button("–ù–∞—á–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ")
        status_box1 = gr.Textbox(label="–°—Ç–∞—Ç—É—Å", lines=4)

    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 ‚Äî –≤—ã–±–æ—Ä –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    with gr.Column(visible=False) as page2:
        video_checklist = gr.CheckboxGroup(label="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", choices=[])
        download_btn = gr.Button("–°–∫–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ")
        back_btn = gr.Button("‚¨Ö –ù–∞–∑–∞–¥")
        status_box2 = gr.Textbox(label="–°—Ç–∞—Ç—É—Å", lines=4)

    media_storage = gr.State([])


    def find_videos(url: str) -> tuple:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º URL.
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å `main_async` –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ.
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –ø–æ–∫–∞–∑—ã–≤–∞—è —Å—Ç–∞—Ç—É—Å
        –ø–æ–∏—Å–∫–∞ –∏ —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ.
        :param url: URL-–∞–¥—Ä–µ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ.
        :yield: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Ç–∞—Ç—É—Å, –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI –∏ —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞.
        """
        status: str = "üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é..."
        yield status, gr.update(visible=True), gr.update(visible=False), [], []
        media_list: list[dict[str, str]] = asyncio.run(main_async(logger, url, USERNAME, PASSWORD))
        if not media_list:
            yield "‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", gr.update(visible=True), gr.update(visible=False), [], []
            return
        titles: list[str] = [m["title"] for m in media_list]
        yield f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(titles)} –≤–∏–¥–µ–æ", gr.update(visible=False), gr.update(
            visible=True), media_list, gr.update(choices=titles)


    def download_selected(selected_titles: list[str], media_list: list[dict[str, str]]) -> str:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ.
        –°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä `MediaInterceptor`, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ –ø–æ
        –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É.
        :param selected_titles: –°–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤–∏–¥–µ–æ, –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
        :param media_list: –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤.
        :return: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
        """
        if not selected_titles:
            return "‚ö† –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
        interceptor = MediaInterceptor(logger)
        interceptor.captured_media_info = [m for m in media_list if m["title"] in selected_titles]
        asyncio.run(interceptor.download_media_list())
        return f"‚úÖ –°–∫–∞—á–∞–Ω–æ {len(selected_titles)} –≤–∏–¥–µ–æ"


    def go_back() -> tuple:
        """
        –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        :return: –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI.
        """
        return gr.update(visible=True), gr.update(visible=False)

    # –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫
    run_btn.click(find_videos, inputs=url_input, outputs=[status_box1, page1, page2, media_storage, video_checklist])
    download_btn.click(download_selected, inputs=[video_checklist, media_storage], outputs=status_box2)
    back_btn.click(go_back, outputs=[page1, page2])


if __name__ == "__main__":
    demo.launch()
